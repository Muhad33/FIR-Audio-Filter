// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\hdlcoder_audio_filter_biquad\Audio_Filter_IP_src_Biquad_Filter_HPF.v
// Created: 2024-11-07 11:40:50
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Audio_Filter_IP_src_Biquad_Filter_HPF
// Source Path: hdlcoder_audio_filter_biquad/Audio_Filter/Filter_block/BiQuad_HPF /Biquad Filter HPF
// Hierarchy Level: 3
// Model version: 10.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Audio_Filter_IP_src_Biquad_Filter_HPF
          (clk,
           reset,
           enb,
           Biquad_Filter_HPF_In,
           Enable_out2,
           Biquad_Filter_HPF_out);


  input   clk;
  input   reset;
  input   enb;
  input   signed [23:0] Biquad_Filter_HPF_In;  // sfix24_En22
  input   Enable_out2;
  output  signed [23:0] Biquad_Filter_HPF_out;  // sfix24_En22


  reg signed [23:0] Biquad_Filter_HPF_In_1;  // sfix24_En22
  wire signed [17:0] kconst;  // sfix18_En17
  reg signed [17:0] kconst_1;  // sfix18_En17
  wire signed [41:0] scale_sec1_1;  // sfix42_En39
  reg signed [41:0] scale_sec1_2;  // sfix42_En39
  wire signed [39:0] scale_sec1_3;  // sfix40_En31
  reg  [1:0] reduced_reg;  // ufix1 [2]
  wire Enable_out2_1;
  wire enb_gated;
  wire enb_gated_1;
  reg signed [23:0] input_delay1_sec1;  // sfix24_En22
  wire signed [41:0] a1_sec1_mul_temp;  // sfix42_En38
  wire signed [33:0] a1_sec1_1;  // sfix34_En31
  wire signed [39:0] cast_a1_sec1_1;  // sfix40_En31
  wire signed [23:0] pivot_sec1;  // sfix24_En22
  reg signed [23:0] input_delay2_sec1_1;  // sfix24_En22
  wire signed [41:0] a2_sec1_mul_temp;  // sfix42_En38
  wire signed [33:0] a2_sec1_1;  // sfix34_En31
  wire signed [39:0] cast_a2_sec1_1;  // sfix40_En31
  wire signed [40:0] sum_a2_sec1_sub_cast;  // sfix41_En31
  wire signed [40:0] sum_a2_sec1_sub_cast_1;  // sfix41_En31
  wire signed [40:0] sum_a2_sec1_sub_temp;  // sfix41_En31
  wire signed [39:0] sum_a2_sec1_1;  // sfix40_En31
  wire signed [40:0] sum_a1_sec1_sub_cast;  // sfix41_En31
  wire signed [40:0] sum_a1_sec1_sub_cast_1;  // sfix41_En31
  wire signed [40:0] sum_a1_sec1_sub_temp;  // sfix41_En31
  wire signed [39:0] sum_a1_sec1_1;  // sfix40_En31
  wire signed [33:0] b0_sec1_1;  // sfix34_En31
  wire signed [39:0] cast_b0_sec1_1;  // sfix40_En31
  reg signed [23:0] input_delay1_sec1_2;  // sfix24_En22
  wire signed [17:0] kconst_2;  // sfix18_En16
  reg signed [17:0] kconst_3;  // sfix18_En16
  wire signed [41:0] b1_sec1_1;  // sfix42_En38
  reg signed [39:0] delayMatch_reg [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch_reg_next [0:1];  // sfix40_En31 [2]
  wire signed [39:0] cast_b0_sec1_2;  // sfix40_En31
  reg signed [41:0] b1_sec1_2;  // sfix42_En38
  wire signed [33:0] b1_sec1_3;  // sfix34_En31
  wire signed [39:0] cast_b1_sec1_1;  // sfix40_En31
  wire signed [40:0] sum_b1_sec1_add_cast;  // sfix41_En31
  wire signed [40:0] sum_b1_sec1_add_cast_1;  // sfix41_En31
  wire signed [40:0] sum_b1_sec1_add_temp;  // sfix41_En31
  wire signed [39:0] sum_b1_sec1_1;  // sfix40_En31
  wire signed [33:0] b2_sec1_1;  // sfix34_En31
  wire signed [39:0] cast_b2_sec1_1;  // sfix40_En31
  reg signed [39:0] delayMatch_reg_1 [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch_reg_next_1 [0:1];  // sfix40_En31 [2]
  wire signed [39:0] cast_b2_sec1_2;  // sfix40_En31
  wire signed [40:0] sum_b2_sec1_add_cast;  // sfix41_En31
  wire signed [40:0] sum_b2_sec1_add_cast_1;  // sfix41_En31
  wire signed [40:0] sum_b2_sec1_add_temp;  // sfix41_En31
  wire signed [39:0] sum_b2_sec1_1;  // sfix40_En31
  reg signed [39:0] sec1_to_sec2;  // sfix40_En31
  wire signed [17:0] kconst_4;  // sfix18_En17
  reg signed [17:0] kconst_5;  // sfix18_En17
  wire signed [57:0] scale_sec2_1;  // sfix58_En48
  reg signed [57:0] scale_sec2_2;  // sfix58_En48
  wire signed [39:0] scale_sec2_3;  // sfix40_En31
  reg  [3:0] reduced_reg_1;  // ufix1 [4]
  wire Enable_out2_2;
  wire enb_gated_2;
  wire enb_gated_3;
  reg signed [23:0] input_delay1_sec2;  // sfix24_En22
  wire signed [41:0] a1_sec2_mul_temp;  // sfix42_En38
  wire signed [33:0] a1_sec2_1;  // sfix34_En31
  wire signed [39:0] cast_a1_sec2_1;  // sfix40_En31
  wire signed [23:0] pivot_sec2;  // sfix24_En22
  reg signed [23:0] input_delay2_sec2_1;  // sfix24_En22
  wire signed [41:0] a2_sec2_mul_temp;  // sfix42_En38
  wire signed [33:0] a2_sec2_1;  // sfix34_En31
  wire signed [39:0] cast_a2_sec2_1;  // sfix40_En31
  wire signed [40:0] sum_a2_sec2_sub_cast;  // sfix41_En31
  wire signed [40:0] sum_a2_sec2_sub_cast_1;  // sfix41_En31
  wire signed [40:0] sum_a2_sec2_sub_temp;  // sfix41_En31
  wire signed [39:0] sum_a2_sec2_1;  // sfix40_En31
  wire signed [40:0] sum_a1_sec2_sub_cast;  // sfix41_En31
  wire signed [40:0] sum_a1_sec2_sub_cast_1;  // sfix41_En31
  wire signed [40:0] sum_a1_sec2_sub_temp;  // sfix41_En31
  wire signed [39:0] sum_a1_sec2_1;  // sfix40_En31
  wire signed [33:0] b0_sec2_1;  // sfix34_En31
  wire signed [39:0] cast_b0_sec2_1;  // sfix40_En31
  reg signed [23:0] input_delay1_sec2_2;  // sfix24_En22
  wire signed [17:0] kconst_6;  // sfix18_En16
  reg signed [17:0] kconst_7;  // sfix18_En16
  wire signed [41:0] b1_sec2_1;  // sfix42_En38
  reg signed [39:0] delayMatch_reg_2 [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch_reg_next_2 [0:1];  // sfix40_En31 [2]
  wire signed [39:0] cast_b0_sec2_2;  // sfix40_En31
  reg signed [41:0] b1_sec2_2;  // sfix42_En38
  wire signed [33:0] b1_sec2_3;  // sfix34_En31
  wire signed [39:0] cast_b1_sec2_1;  // sfix40_En31
  wire signed [40:0] sum_b1_sec2_add_cast;  // sfix41_En31
  wire signed [40:0] sum_b1_sec2_add_cast_1;  // sfix41_En31
  wire signed [40:0] sum_b1_sec2_add_temp;  // sfix41_En31
  wire signed [39:0] sum_b1_sec2_1;  // sfix40_En31
  wire signed [33:0] b2_sec2_1;  // sfix34_En31
  wire signed [39:0] cast_b2_sec2_1;  // sfix40_En31
  reg signed [39:0] delayMatch_reg_3 [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch_reg_next_3 [0:1];  // sfix40_En31 [2]
  wire signed [39:0] cast_b2_sec2_2;  // sfix40_En31
  wire signed [40:0] sum_b2_sec2_add_cast;  // sfix41_En31
  wire signed [40:0] sum_b2_sec2_add_cast_1;  // sfix41_En31
  wire signed [40:0] sum_b2_sec2_add_temp;  // sfix41_En31
  wire signed [39:0] sum_b2_sec2_1;  // sfix40_En31
  reg signed [39:0] sec2_to_sec3;  // sfix40_En31
  wire signed [17:0] kconst_8;  // sfix18_En17
  reg signed [17:0] kconst_9;  // sfix18_En17
  wire signed [57:0] scale_sec3_1;  // sfix58_En48
  reg signed [57:0] scale_sec3_2;  // sfix58_En48
  wire signed [39:0] scale_sec3_3;  // sfix40_En31
  reg  [3:0] reduced_reg_2;  // ufix1 [4]
  wire Enable_out2_3;
  wire enb_gated_4;
  wire enb_gated_5;
  reg signed [23:0] input_delay1_sec3;  // sfix24_En22
  wire signed [41:0] a1_sec3_mul_temp;  // sfix42_En38
  wire signed [33:0] a1_sec3_1;  // sfix34_En31
  wire signed [39:0] cast_a1_sec3_1;  // sfix40_En31
  wire signed [23:0] pivot_sec3;  // sfix24_En22
  reg signed [23:0] input_delay2_sec3_1;  // sfix24_En22
  wire signed [41:0] a2_sec3_mul_temp;  // sfix42_En38
  wire signed [33:0] a2_sec3_1;  // sfix34_En31
  wire signed [39:0] cast_a2_sec3_1;  // sfix40_En31
  wire signed [40:0] sum_a2_sec3_sub_cast;  // sfix41_En31
  wire signed [40:0] sum_a2_sec3_sub_cast_1;  // sfix41_En31
  wire signed [40:0] sum_a2_sec3_sub_temp;  // sfix41_En31
  wire signed [39:0] sum_a2_sec3_1;  // sfix40_En31
  wire signed [40:0] sum_a1_sec3_sub_cast;  // sfix41_En31
  wire signed [40:0] sum_a1_sec3_sub_cast_1;  // sfix41_En31
  wire signed [40:0] sum_a1_sec3_sub_temp;  // sfix41_En31
  wire signed [39:0] sum_a1_sec3_1;  // sfix40_En31
  wire signed [33:0] b0_sec3_1;  // sfix34_En31
  wire signed [39:0] cast_b0_sec3_1;  // sfix40_En31
  reg signed [23:0] input_delay1_sec3_2;  // sfix24_En22
  wire signed [17:0] kconst_10;  // sfix18_En16
  reg signed [17:0] kconst_11;  // sfix18_En16
  wire signed [41:0] b1_sec3_1;  // sfix42_En38
  reg signed [39:0] delayMatch_reg_4 [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch_reg_next_4 [0:1];  // sfix40_En31 [2]
  wire signed [39:0] cast_b0_sec3_2;  // sfix40_En31
  reg signed [41:0] b1_sec3_2;  // sfix42_En38
  wire signed [33:0] b1_sec3_3;  // sfix34_En31
  wire signed [39:0] cast_b1_sec3_1;  // sfix40_En31
  wire signed [40:0] sum_b1_sec3_add_cast;  // sfix41_En31
  wire signed [40:0] sum_b1_sec3_add_cast_1;  // sfix41_En31
  wire signed [40:0] sum_b1_sec3_add_temp;  // sfix41_En31
  wire signed [39:0] sum_b1_sec3_1;  // sfix40_En31
  wire signed [33:0] b2_sec3_1;  // sfix34_En31
  wire signed [39:0] cast_b2_sec3_1;  // sfix40_En31
  reg signed [39:0] delayMatch_reg_5 [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch_reg_next_5 [0:1];  // sfix40_En31 [2]
  wire signed [39:0] cast_b2_sec3_2;  // sfix40_En31
  wire signed [40:0] sum_b2_sec3_add_cast;  // sfix41_En31
  wire signed [40:0] sum_b2_sec3_add_cast_1;  // sfix41_En31
  wire signed [40:0] sum_b2_sec3_add_temp;  // sfix41_En31
  wire signed [39:0] sum_b2_sec3_1;  // sfix40_En31
  reg signed [39:0] sec3_to_sec4;  // sfix40_En31
  wire signed [17:0] kconst_12;  // sfix18_En17
  reg signed [17:0] kconst_13;  // sfix18_En17
  wire signed [57:0] scale_sec4_1;  // sfix58_En48
  reg signed [57:0] scale_sec4_2;  // sfix58_En48
  wire signed [39:0] scale_sec4_3;  // sfix40_En31
  reg  [3:0] reduced_reg_3;  // ufix1 [4]
  wire Enable_out2_4;
  wire enb_gated_6;
  wire enb_gated_7;
  reg signed [23:0] input_delay1_sec4;  // sfix24_En22
  wire signed [41:0] a1_sec4_mul_temp;  // sfix42_En38
  wire signed [33:0] a1_sec4_1;  // sfix34_En31
  wire signed [39:0] cast_a1_sec4_1;  // sfix40_En31
  wire signed [23:0] pivot_sec4;  // sfix24_En22
  reg signed [23:0] input_delay2_sec4_1;  // sfix24_En22
  wire signed [41:0] a2_sec4_mul_temp;  // sfix42_En38
  wire signed [33:0] a2_sec4_1;  // sfix34_En31
  wire signed [39:0] cast_a2_sec4_1;  // sfix40_En31
  wire signed [40:0] sum_a2_sec4_sub_cast;  // sfix41_En31
  wire signed [40:0] sum_a2_sec4_sub_cast_1;  // sfix41_En31
  wire signed [40:0] sum_a2_sec4_sub_temp;  // sfix41_En31
  wire signed [39:0] sum_a2_sec4_1;  // sfix40_En31
  wire signed [40:0] sum_a1_sec4_sub_cast;  // sfix41_En31
  wire signed [40:0] sum_a1_sec4_sub_cast_1;  // sfix41_En31
  wire signed [40:0] sum_a1_sec4_sub_temp;  // sfix41_En31
  wire signed [39:0] sum_a1_sec4_1;  // sfix40_En31
  wire signed [33:0] b0_sec4_1;  // sfix34_En31
  wire signed [39:0] cast_b0_sec4_1;  // sfix40_En31
  reg signed [23:0] input_delay1_sec4_2;  // sfix24_En22
  wire signed [17:0] kconst_14;  // sfix18_En16
  reg signed [17:0] kconst_15;  // sfix18_En16
  wire signed [41:0] b1_sec4_1;  // sfix42_En38
  reg signed [39:0] delayMatch_reg_6 [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch_reg_next_6 [0:1];  // sfix40_En31 [2]
  wire signed [39:0] cast_b0_sec4_2;  // sfix40_En31
  reg signed [41:0] b1_sec4_2;  // sfix42_En38
  wire signed [33:0] b1_sec4_3;  // sfix34_En31
  wire signed [39:0] cast_b1_sec4_1;  // sfix40_En31
  wire signed [40:0] sum_b1_sec4_add_cast;  // sfix41_En31
  wire signed [40:0] sum_b1_sec4_add_cast_1;  // sfix41_En31
  wire signed [40:0] sum_b1_sec4_add_temp;  // sfix41_En31
  wire signed [39:0] sum_b1_sec4_1;  // sfix40_En31
  wire signed [33:0] b2_sec4_1;  // sfix34_En31
  wire signed [39:0] cast_b2_sec4_1;  // sfix40_En31
  reg signed [39:0] delayMatch_reg_7 [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch_reg_next_7 [0:1];  // sfix40_En31 [2]
  wire signed [39:0] cast_b2_sec4_2;  // sfix40_En31
  wire signed [40:0] sum_b2_sec4_add_cast;  // sfix41_En31
  wire signed [40:0] sum_b2_sec4_add_cast_1;  // sfix41_En31
  wire signed [40:0] sum_b2_sec4_add_temp;  // sfix41_En31
  wire signed [39:0] sum_b2_sec4_1;  // sfix40_En31
  reg signed [39:0] sec4_to_sec5;  // sfix40_En31
  wire signed [17:0] kconst_16;  // sfix18_En17
  reg signed [17:0] kconst_17;  // sfix18_En17
  wire signed [57:0] scale_sec5_1;  // sfix58_En48
  reg signed [57:0] scale_sec5_2;  // sfix58_En48
  wire signed [39:0] scale_sec5_3;  // sfix40_En31
  reg  [3:0] reduced_reg_4;  // ufix1 [4]
  wire Enable_out2_5;
  wire enb_gated_8;
  wire enb_gated_9;
  reg signed [23:0] input_delay1_sec5;  // sfix24_En22
  wire signed [41:0] a1_sec5_mul_temp;  // sfix42_En38
  wire signed [33:0] a1_sec5_1;  // sfix34_En31
  wire signed [39:0] cast_a1_sec5_1;  // sfix40_En31
  wire signed [23:0] pivot_sec5;  // sfix24_En22
  reg signed [23:0] input_delay2_sec5_1;  // sfix24_En22
  wire signed [41:0] a2_sec5_mul_temp;  // sfix42_En38
  wire signed [33:0] a2_sec5_1;  // sfix34_En31
  wire signed [39:0] cast_a2_sec5_1;  // sfix40_En31
  wire signed [40:0] sum_a2_sec5_sub_cast;  // sfix41_En31
  wire signed [40:0] sum_a2_sec5_sub_cast_1;  // sfix41_En31
  wire signed [40:0] sum_a2_sec5_sub_temp;  // sfix41_En31
  wire signed [39:0] sum_a2_sec5_1;  // sfix40_En31
  wire signed [40:0] sum_a1_sec5_sub_cast;  // sfix41_En31
  wire signed [40:0] sum_a1_sec5_sub_cast_1;  // sfix41_En31
  wire signed [40:0] sum_a1_sec5_sub_temp;  // sfix41_En31
  wire signed [39:0] sum_a1_sec5_1;  // sfix40_En31
  wire signed [33:0] b0_sec5_1;  // sfix34_En31
  wire signed [39:0] cast_b0_sec5_1;  // sfix40_En31
  reg signed [23:0] input_delay1_sec5_2;  // sfix24_En22
  wire signed [17:0] kconst_18;  // sfix18_En16
  reg signed [17:0] kconst_19;  // sfix18_En16
  wire signed [41:0] b1_sec5_1;  // sfix42_En38
  reg signed [39:0] delayMatch_reg_8 [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch_reg_next_8 [0:1];  // sfix40_En31 [2]
  wire signed [39:0] cast_b0_sec5_2;  // sfix40_En31
  reg signed [41:0] b1_sec5_2;  // sfix42_En38
  wire signed [33:0] b1_sec5_3;  // sfix34_En31
  wire signed [39:0] cast_b1_sec5_1;  // sfix40_En31
  wire signed [40:0] sum_b1_sec5_add_cast;  // sfix41_En31
  wire signed [40:0] sum_b1_sec5_add_cast_1;  // sfix41_En31
  wire signed [40:0] sum_b1_sec5_add_temp;  // sfix41_En31
  wire signed [39:0] sum_b1_sec5_1;  // sfix40_En31
  wire signed [33:0] b2_sec5_1;  // sfix34_En31
  wire signed [39:0] cast_b2_sec5_1;  // sfix40_En31
  reg signed [39:0] delayMatch_reg_9 [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch_reg_next_9 [0:1];  // sfix40_En31 [2]
  wire signed [39:0] cast_b2_sec5_2;  // sfix40_En31
  wire signed [40:0] sum_b2_sec5_add_cast;  // sfix41_En31
  wire signed [40:0] sum_b2_sec5_add_cast_1;  // sfix41_En31
  wire signed [40:0] sum_b2_sec5_add_temp;  // sfix41_En31
  wire signed [39:0] sum_b2_sec5_1;  // sfix40_En31
  reg signed [31:0] delayMatch_t_0_0;  // int32
  reg signed [31:0] delayMatch_t_1;  // int32
  reg signed [31:0] delayMatch_t_0_0_1;  // int32
  reg signed [31:0] delayMatch_t_1_1;  // int32
  reg signed [31:0] delayMatch_t_0_0_2;  // int32
  reg signed [31:0] delayMatch_t_1_2;  // int32
  reg signed [31:0] delayMatch_t_0_0_3;  // int32
  reg signed [31:0] delayMatch_t_1_3;  // int32
  reg signed [31:0] delayMatch_t_0_0_4;  // int32
  reg signed [31:0] delayMatch_t_1_4;  // int32
  reg signed [31:0] delayMatch_t_0_0_5;  // int32
  reg signed [31:0] delayMatch_t_1_5;  // int32
  reg signed [31:0] delayMatch_t_0_0_6;  // int32
  reg signed [31:0] delayMatch_t_1_6;  // int32
  reg signed [31:0] delayMatch_t_0_0_7;  // int32
  reg signed [31:0] delayMatch_t_1_7;  // int32
  reg signed [31:0] delayMatch_t_0_0_8;  // int32
  reg signed [31:0] delayMatch_t_1_8;  // int32


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        Biquad_Filter_HPF_In_1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Biquad_Filter_HPF_In_1 <= Biquad_Filter_HPF_In;
        end
      end
    end

  assign kconst = 18'sb010111010000101000;

  always @(posedge clk)
    begin : HwModeRegister_1_process
      if (reset == 1'b1) begin
        kconst_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end

  assign scale_sec1_1 = Biquad_Filter_HPF_In_1 * kconst_1;
  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        scale_sec1_2 <= 42'sh00000000000;
      end
      else begin
        if (enb) begin
          scale_sec1_2 <= scale_sec1_1;
        end
      end
    end

  assign scale_sec1_3 = {{6{scale_sec1_2[41]}}, scale_sec1_2[41:8]};

  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        reduced_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= Enable_out2;
          reduced_reg[1] <= reduced_reg[0];
        end
      end
    end

  assign Enable_out2_1 = reduced_reg[1];

  assign enb_gated = Enable_out2_1 && enb;

  assign enb_gated_1 = Enable_out2_1 && enb;

  assign a1_sec1_mul_temp = 18'sb111100100101001100 * input_delay1_sec1;
  assign a1_sec1_1 = ((a1_sec1_mul_temp[41] == 1'b0) && (a1_sec1_mul_temp[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((a1_sec1_mul_temp[41] == 1'b1) && (a1_sec1_mul_temp[40] != 1'b1) ? 34'sh200000000 :
              $signed(a1_sec1_mul_temp[40:7])));
  assign cast_a1_sec1_1 = {{6{a1_sec1_1[33]}}, a1_sec1_1};
  always @(posedge clk)
    begin : input_delay1_sec1_1_process
      if (reset == 1'b1) begin
        input_delay1_sec1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb_gated) begin
          input_delay1_sec1 <= pivot_sec1;
        end
      end
    end
  always @(posedge clk)
    begin : input_delay2_sec1_process
      if (reset == 1'b1) begin
        input_delay2_sec1_1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb_gated_1) begin
          input_delay2_sec1_1 <= input_delay1_sec1;
        end
      end
    end
  assign a2_sec1_mul_temp = 18'sb001100111111001000 * input_delay2_sec1_1;
  assign a2_sec1_1 = ((a2_sec1_mul_temp[41] == 1'b0) && (a2_sec1_mul_temp[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((a2_sec1_mul_temp[41] == 1'b1) && (a2_sec1_mul_temp[40] != 1'b1) ? 34'sh200000000 :
              $signed(a2_sec1_mul_temp[40:7])));
  assign cast_a2_sec1_1 = {{6{a2_sec1_1[33]}}, a2_sec1_1};
  assign sum_a2_sec1_sub_cast = {scale_sec1_3[39], scale_sec1_3};
  assign sum_a2_sec1_sub_cast_1 = {cast_a2_sec1_1[39], cast_a2_sec1_1};
  assign sum_a2_sec1_sub_temp = sum_a2_sec1_sub_cast - sum_a2_sec1_sub_cast_1;
  assign sum_a2_sec1_1 = ((sum_a2_sec1_sub_temp[40] == 1'b0) && (sum_a2_sec1_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_a2_sec1_sub_temp[40] == 1'b1) && (sum_a2_sec1_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_a2_sec1_sub_temp[39:0])));
  assign sum_a1_sec1_sub_cast = {sum_a2_sec1_1[39], sum_a2_sec1_1};
  assign sum_a1_sec1_sub_cast_1 = {cast_a1_sec1_1[39], cast_a1_sec1_1};
  assign sum_a1_sec1_sub_temp = sum_a1_sec1_sub_cast - sum_a1_sec1_sub_cast_1;
  assign sum_a1_sec1_1 = ((sum_a1_sec1_sub_temp[40] == 1'b0) && (sum_a1_sec1_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_a1_sec1_sub_temp[40] == 1'b1) && (sum_a1_sec1_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_a1_sec1_sub_temp[39:0])));
  assign pivot_sec1 = ((sum_a1_sec1_1[39] == 1'b0) && (sum_a1_sec1_1[38:32] != 7'b0000000) ? 24'sb011111111111111111111111 :
              ((sum_a1_sec1_1[39] == 1'b1) && (sum_a1_sec1_1[38:32] != 7'b1111111) ? 24'sb100000000000000000000000 :
              $signed(sum_a1_sec1_1[32:9])));
  assign b0_sec1_1 = {pivot_sec1[23], {pivot_sec1, 9'b000000000}};
  assign cast_b0_sec1_1 = {{6{b0_sec1_1[33]}}, b0_sec1_1};
  always @(posedge clk)
    begin : HwModeRegister_2_process
      if (reset == 1'b1) begin
        input_delay1_sec1_2 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          input_delay1_sec1_2 <= input_delay1_sec1;
        end
      end
    end

  assign kconst_2 = 18'sb110011011010101100;

  always @(posedge clk)
    begin : HwModeRegister_3_process
      if (reset == 1'b1) begin
        kconst_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end

  assign b1_sec1_1 = input_delay1_sec1_2 * kconst_3;
  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1 = 32'sd0; delayMatch_t_1 <= 32'sd1; delayMatch_t_1 = delayMatch_t_1 + 32'sd1) begin
          delayMatch_reg[delayMatch_t_1] <= 40'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(delayMatch_t_0_0 = 32'sd0; delayMatch_t_0_0 <= 32'sd1; delayMatch_t_0_0 = delayMatch_t_0_0 + 32'sd1) begin
            delayMatch_reg[delayMatch_t_0_0] <= delayMatch_reg_next[delayMatch_t_0_0];
          end
        end
      end
    end

  assign cast_b0_sec1_2 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = cast_b0_sec1_1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];

  always @(posedge clk)
    begin : PipelineRegister_1_process
      if (reset == 1'b1) begin
        b1_sec1_2 <= 42'sh00000000000;
      end
      else begin
        if (enb) begin
          b1_sec1_2 <= b1_sec1_1;
        end
      end
    end

  assign b1_sec1_3 = ((b1_sec1_2[41] == 1'b0) && (b1_sec1_2[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((b1_sec1_2[41] == 1'b1) && (b1_sec1_2[40] != 1'b1) ? 34'sh200000000 :
              $signed(b1_sec1_2[40:7])));

  assign cast_b1_sec1_1 = {{6{b1_sec1_3[33]}}, b1_sec1_3};
  assign sum_b1_sec1_add_cast = {cast_b0_sec1_2[39], cast_b0_sec1_2};
  assign sum_b1_sec1_add_cast_1 = {cast_b1_sec1_1[39], cast_b1_sec1_1};
  assign sum_b1_sec1_add_temp = sum_b1_sec1_add_cast + sum_b1_sec1_add_cast_1;
  assign sum_b1_sec1_1 = ((sum_b1_sec1_add_temp[40] == 1'b0) && (sum_b1_sec1_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_b1_sec1_add_temp[40] == 1'b1) && (sum_b1_sec1_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_b1_sec1_add_temp[39:0])));
  assign b2_sec1_1 = {input_delay2_sec1_1[23], {input_delay2_sec1_1, 9'b000000000}};
  assign cast_b2_sec1_1 = {{6{b2_sec1_1[33]}}, b2_sec1_1};
  always @(posedge clk)
    begin : delayMatch_1_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1 = 32'sd0; delayMatch_t_1 <= 32'sd1; delayMatch_t_1 = delayMatch_t_1 + 32'sd1) begin
          delayMatch_reg_1[delayMatch_t_1] <= 40'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(delayMatch_t_0_0 = 32'sd0; delayMatch_t_0_0 <= 32'sd1; delayMatch_t_0_0 = delayMatch_t_0_0 + 32'sd1) begin
            delayMatch_reg_1[delayMatch_t_0_0] <= delayMatch_reg_next_1[delayMatch_t_0_0];
          end
        end
      end
    end

  assign cast_b2_sec1_2 = delayMatch_reg_1[1];
  assign delayMatch_reg_next_1[0] = cast_b2_sec1_1;
  assign delayMatch_reg_next_1[1] = delayMatch_reg_1[0];

  assign sum_b2_sec1_add_cast = {sum_b1_sec1_1[39], sum_b1_sec1_1};
  assign sum_b2_sec1_add_cast_1 = {cast_b2_sec1_2[39], cast_b2_sec1_2};
  assign sum_b2_sec1_add_temp = sum_b2_sec1_add_cast + sum_b2_sec1_add_cast_1;
  assign sum_b2_sec1_1 = ((sum_b2_sec1_add_temp[40] == 1'b0) && (sum_b2_sec1_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_b2_sec1_add_temp[40] == 1'b1) && (sum_b2_sec1_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_b2_sec1_add_temp[39:0])));
  always @(posedge clk)
    begin : HwModeRegister_4_process
      if (reset == 1'b1) begin
        sec1_to_sec2 <= 40'sh0000000000;
      end
      else begin
        if (enb) begin
          sec1_to_sec2 <= sum_b2_sec1_1;
        end
      end
    end

  assign kconst_4 = 18'sb010011010010001000;

  always @(posedge clk)
    begin : HwModeRegister_5_process
      if (reset == 1'b1) begin
        kconst_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_5 <= kconst_4;
        end
      end
    end

  assign scale_sec2_1 = sec1_to_sec2 * kconst_5;
  always @(posedge clk)
    begin : PipelineRegister_2_process
      if (reset == 1'b1) begin
        scale_sec2_2 <= 58'sh000000000000000;
      end
      else begin
        if (enb) begin
          scale_sec2_2 <= scale_sec2_1;
        end
      end
    end

  assign scale_sec2_3 = ((scale_sec2_2[57] == 1'b0) && (scale_sec2_2[56] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((scale_sec2_2[57] == 1'b1) && (scale_sec2_2[56] != 1'b1) ? 40'sh8000000000 :
              $signed(scale_sec2_2[56:17])));

  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg_1 <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          reduced_reg_1[0] <= Enable_out2_1;
          reduced_reg_1[32'sd3:32'sd1] <= reduced_reg_1[32'sd2:32'sd0];
        end
      end
    end

  assign Enable_out2_2 = reduced_reg_1[3];

  assign enb_gated_2 = Enable_out2_2 && enb;

  assign enb_gated_3 = Enable_out2_2 && enb;

  assign a1_sec2_mul_temp = 18'sb111011110101110100 * input_delay1_sec2;
  assign a1_sec2_1 = ((a1_sec2_mul_temp[41] == 1'b0) && (a1_sec2_mul_temp[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((a1_sec2_mul_temp[41] == 1'b1) && (a1_sec2_mul_temp[40] != 1'b1) ? 34'sh200000000 :
              $signed(a1_sec2_mul_temp[40:7])));
  assign cast_a1_sec2_1 = {{6{a1_sec2_1[33]}}, a1_sec2_1};
  always @(posedge clk)
    begin : input_delay1_sec2_1_process
      if (reset == 1'b1) begin
        input_delay1_sec2 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb_gated_2) begin
          input_delay1_sec2 <= pivot_sec2;
        end
      end
    end
  always @(posedge clk)
    begin : input_delay2_sec2_process
      if (reset == 1'b1) begin
        input_delay2_sec2_1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb_gated_3) begin
          input_delay2_sec2_1 <= input_delay1_sec2;
        end
      end
    end
  assign a2_sec2_mul_temp = 18'sb001000010100001100 * input_delay2_sec2_1;
  assign a2_sec2_1 = ((a2_sec2_mul_temp[41] == 1'b0) && (a2_sec2_mul_temp[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((a2_sec2_mul_temp[41] == 1'b1) && (a2_sec2_mul_temp[40] != 1'b1) ? 34'sh200000000 :
              $signed(a2_sec2_mul_temp[40:7])));
  assign cast_a2_sec2_1 = {{6{a2_sec2_1[33]}}, a2_sec2_1};
  assign sum_a2_sec2_sub_cast = {scale_sec2_3[39], scale_sec2_3};
  assign sum_a2_sec2_sub_cast_1 = {cast_a2_sec2_1[39], cast_a2_sec2_1};
  assign sum_a2_sec2_sub_temp = sum_a2_sec2_sub_cast - sum_a2_sec2_sub_cast_1;
  assign sum_a2_sec2_1 = ((sum_a2_sec2_sub_temp[40] == 1'b0) && (sum_a2_sec2_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_a2_sec2_sub_temp[40] == 1'b1) && (sum_a2_sec2_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_a2_sec2_sub_temp[39:0])));
  assign sum_a1_sec2_sub_cast = {sum_a2_sec2_1[39], sum_a2_sec2_1};
  assign sum_a1_sec2_sub_cast_1 = {cast_a1_sec2_1[39], cast_a1_sec2_1};
  assign sum_a1_sec2_sub_temp = sum_a1_sec2_sub_cast - sum_a1_sec2_sub_cast_1;
  assign sum_a1_sec2_1 = ((sum_a1_sec2_sub_temp[40] == 1'b0) && (sum_a1_sec2_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_a1_sec2_sub_temp[40] == 1'b1) && (sum_a1_sec2_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_a1_sec2_sub_temp[39:0])));
  assign pivot_sec2 = ((sum_a1_sec2_1[39] == 1'b0) && (sum_a1_sec2_1[38:32] != 7'b0000000) ? 24'sb011111111111111111111111 :
              ((sum_a1_sec2_1[39] == 1'b1) && (sum_a1_sec2_1[38:32] != 7'b1111111) ? 24'sb100000000000000000000000 :
              $signed(sum_a1_sec2_1[32:9])));
  assign b0_sec2_1 = {pivot_sec2[23], {pivot_sec2, 9'b000000000}};
  assign cast_b0_sec2_1 = {{6{b0_sec2_1[33]}}, b0_sec2_1};
  always @(posedge clk)
    begin : HwModeRegister_6_process
      if (reset == 1'b1) begin
        input_delay1_sec2_2 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          input_delay1_sec2_2 <= input_delay1_sec2;
        end
      end
    end

  assign kconst_6 = 18'sb110000101111111000;

  always @(posedge clk)
    begin : HwModeRegister_7_process
      if (reset == 1'b1) begin
        kconst_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_7 <= kconst_6;
        end
      end
    end

  assign b1_sec2_1 = input_delay1_sec2_2 * kconst_7;
  always @(posedge clk)
    begin : delayMatch_2_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1_1 = 32'sd0; delayMatch_t_1_1 <= 32'sd1; delayMatch_t_1_1 = delayMatch_t_1_1 + 32'sd1) begin
          delayMatch_reg_2[delayMatch_t_1_1] <= 40'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(delayMatch_t_0_0_1 = 32'sd0; delayMatch_t_0_0_1 <= 32'sd1; delayMatch_t_0_0_1 = delayMatch_t_0_0_1 + 32'sd1) begin
            delayMatch_reg_2[delayMatch_t_0_0_1] <= delayMatch_reg_next_2[delayMatch_t_0_0_1];
          end
        end
      end
    end

  assign cast_b0_sec2_2 = delayMatch_reg_2[1];
  assign delayMatch_reg_next_2[0] = cast_b0_sec2_1;
  assign delayMatch_reg_next_2[1] = delayMatch_reg_2[0];

  always @(posedge clk)
    begin : PipelineRegister_3_process
      if (reset == 1'b1) begin
        b1_sec2_2 <= 42'sh00000000000;
      end
      else begin
        if (enb) begin
          b1_sec2_2 <= b1_sec2_1;
        end
      end
    end

  assign b1_sec2_3 = ((b1_sec2_2[41] == 1'b0) && (b1_sec2_2[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((b1_sec2_2[41] == 1'b1) && (b1_sec2_2[40] != 1'b1) ? 34'sh200000000 :
              $signed(b1_sec2_2[40:7])));

  assign cast_b1_sec2_1 = {{6{b1_sec2_3[33]}}, b1_sec2_3};
  assign sum_b1_sec2_add_cast = {cast_b0_sec2_2[39], cast_b0_sec2_2};
  assign sum_b1_sec2_add_cast_1 = {cast_b1_sec2_1[39], cast_b1_sec2_1};
  assign sum_b1_sec2_add_temp = sum_b1_sec2_add_cast + sum_b1_sec2_add_cast_1;
  assign sum_b1_sec2_1 = ((sum_b1_sec2_add_temp[40] == 1'b0) && (sum_b1_sec2_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_b1_sec2_add_temp[40] == 1'b1) && (sum_b1_sec2_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_b1_sec2_add_temp[39:0])));
  assign b2_sec2_1 = {input_delay2_sec2_1[23], {input_delay2_sec2_1, 9'b000000000}};
  assign cast_b2_sec2_1 = {{6{b2_sec2_1[33]}}, b2_sec2_1};
  always @(posedge clk)
    begin : delayMatch_3_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1_2 = 32'sd0; delayMatch_t_1_2 <= 32'sd1; delayMatch_t_1_2 = delayMatch_t_1_2 + 32'sd1) begin
          delayMatch_reg_3[delayMatch_t_1_2] <= 40'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(delayMatch_t_0_0_2 = 32'sd0; delayMatch_t_0_0_2 <= 32'sd1; delayMatch_t_0_0_2 = delayMatch_t_0_0_2 + 32'sd1) begin
            delayMatch_reg_3[delayMatch_t_0_0_2] <= delayMatch_reg_next_3[delayMatch_t_0_0_2];
          end
        end
      end
    end

  assign cast_b2_sec2_2 = delayMatch_reg_3[1];
  assign delayMatch_reg_next_3[0] = cast_b2_sec2_1;
  assign delayMatch_reg_next_3[1] = delayMatch_reg_3[0];

  assign sum_b2_sec2_add_cast = {sum_b1_sec2_1[39], sum_b1_sec2_1};
  assign sum_b2_sec2_add_cast_1 = {cast_b2_sec2_2[39], cast_b2_sec2_2};
  assign sum_b2_sec2_add_temp = sum_b2_sec2_add_cast + sum_b2_sec2_add_cast_1;
  assign sum_b2_sec2_1 = ((sum_b2_sec2_add_temp[40] == 1'b0) && (sum_b2_sec2_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_b2_sec2_add_temp[40] == 1'b1) && (sum_b2_sec2_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_b2_sec2_add_temp[39:0])));
  always @(posedge clk)
    begin : HwModeRegister_8_process
      if (reset == 1'b1) begin
        sec2_to_sec3 <= 40'sh0000000000;
      end
      else begin
        if (enb) begin
          sec2_to_sec3 <= sum_b2_sec2_1;
        end
      end
    end

  assign kconst_8 = 18'sb010000001100010100;

  always @(posedge clk)
    begin : HwModeRegister_9_process
      if (reset == 1'b1) begin
        kconst_9 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_9 <= kconst_8;
        end
      end
    end

  assign scale_sec3_1 = sec2_to_sec3 * kconst_9;
  always @(posedge clk)
    begin : PipelineRegister_4_process
      if (reset == 1'b1) begin
        scale_sec3_2 <= 58'sh000000000000000;
      end
      else begin
        if (enb) begin
          scale_sec3_2 <= scale_sec3_1;
        end
      end
    end

  assign scale_sec3_3 = ((scale_sec3_2[57] == 1'b0) && (scale_sec3_2[56] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((scale_sec3_2[57] == 1'b1) && (scale_sec3_2[56] != 1'b1) ? 40'sh8000000000 :
              $signed(scale_sec3_2[56:17])));

  always @(posedge clk)
    begin : reduced_2_process
      if (reset == 1'b1) begin
        reduced_reg_2 <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          reduced_reg_2[0] <= Enable_out2_2;
          reduced_reg_2[32'sd3:32'sd1] <= reduced_reg_2[32'sd2:32'sd0];
        end
      end
    end

  assign Enable_out2_3 = reduced_reg_2[3];

  assign enb_gated_4 = Enable_out2_3 && enb;

  assign enb_gated_5 = Enable_out2_3 && enb;

  assign a1_sec3_mul_temp = 18'sb111010011001011000 * input_delay1_sec3;
  assign a1_sec3_1 = ((a1_sec3_mul_temp[41] == 1'b0) && (a1_sec3_mul_temp[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((a1_sec3_mul_temp[41] == 1'b1) && (a1_sec3_mul_temp[40] != 1'b1) ? 34'sh200000000 :
              $signed(a1_sec3_mul_temp[40:7])));
  assign cast_a1_sec3_1 = {{6{a1_sec3_1[33]}}, a1_sec3_1};
  always @(posedge clk)
    begin : input_delay1_sec3_1_process
      if (reset == 1'b1) begin
        input_delay1_sec3 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb_gated_4) begin
          input_delay1_sec3 <= pivot_sec3;
        end
      end
    end
  always @(posedge clk)
    begin : input_delay2_sec3_process
      if (reset == 1'b1) begin
        input_delay2_sec3_1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb_gated_5) begin
          input_delay2_sec3_1 <= input_delay1_sec3;
        end
      end
    end
  assign a2_sec3_mul_temp = 18'sb000100110111110000 * input_delay2_sec3_1;
  assign a2_sec3_1 = ((a2_sec3_mul_temp[41] == 1'b0) && (a2_sec3_mul_temp[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((a2_sec3_mul_temp[41] == 1'b1) && (a2_sec3_mul_temp[40] != 1'b1) ? 34'sh200000000 :
              $signed(a2_sec3_mul_temp[40:7])));
  assign cast_a2_sec3_1 = {{6{a2_sec3_1[33]}}, a2_sec3_1};
  assign sum_a2_sec3_sub_cast = {scale_sec3_3[39], scale_sec3_3};
  assign sum_a2_sec3_sub_cast_1 = {cast_a2_sec3_1[39], cast_a2_sec3_1};
  assign sum_a2_sec3_sub_temp = sum_a2_sec3_sub_cast - sum_a2_sec3_sub_cast_1;
  assign sum_a2_sec3_1 = ((sum_a2_sec3_sub_temp[40] == 1'b0) && (sum_a2_sec3_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_a2_sec3_sub_temp[40] == 1'b1) && (sum_a2_sec3_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_a2_sec3_sub_temp[39:0])));
  assign sum_a1_sec3_sub_cast = {sum_a2_sec3_1[39], sum_a2_sec3_1};
  assign sum_a1_sec3_sub_cast_1 = {cast_a1_sec3_1[39], cast_a1_sec3_1};
  assign sum_a1_sec3_sub_temp = sum_a1_sec3_sub_cast - sum_a1_sec3_sub_cast_1;
  assign sum_a1_sec3_1 = ((sum_a1_sec3_sub_temp[40] == 1'b0) && (sum_a1_sec3_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_a1_sec3_sub_temp[40] == 1'b1) && (sum_a1_sec3_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_a1_sec3_sub_temp[39:0])));
  assign pivot_sec3 = ((sum_a1_sec3_1[39] == 1'b0) && (sum_a1_sec3_1[38:32] != 7'b0000000) ? 24'sb011111111111111111111111 :
              ((sum_a1_sec3_1[39] == 1'b1) && (sum_a1_sec3_1[38:32] != 7'b1111111) ? 24'sb100000000000000000000000 :
              $signed(sum_a1_sec3_1[32:9])));
  assign b0_sec3_1 = {pivot_sec3[23], {pivot_sec3, 9'b000000000}};
  assign cast_b0_sec3_1 = {{6{b0_sec3_1[33]}}, b0_sec3_1};
  always @(posedge clk)
    begin : HwModeRegister_10_process
      if (reset == 1'b1) begin
        input_delay1_sec3_2 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          input_delay1_sec3_2 <= input_delay1_sec3;
        end
      end
    end

  assign kconst_10 = 18'sb101011101011100000;

  always @(posedge clk)
    begin : HwModeRegister_11_process
      if (reset == 1'b1) begin
        kconst_11 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_11 <= kconst_10;
        end
      end
    end

  assign b1_sec3_1 = input_delay1_sec3_2 * kconst_11;
  always @(posedge clk)
    begin : delayMatch_4_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1_3 = 32'sd0; delayMatch_t_1_3 <= 32'sd1; delayMatch_t_1_3 = delayMatch_t_1_3 + 32'sd1) begin
          delayMatch_reg_4[delayMatch_t_1_3] <= 40'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(delayMatch_t_0_0_3 = 32'sd0; delayMatch_t_0_0_3 <= 32'sd1; delayMatch_t_0_0_3 = delayMatch_t_0_0_3 + 32'sd1) begin
            delayMatch_reg_4[delayMatch_t_0_0_3] <= delayMatch_reg_next_4[delayMatch_t_0_0_3];
          end
        end
      end
    end

  assign cast_b0_sec3_2 = delayMatch_reg_4[1];
  assign delayMatch_reg_next_4[0] = cast_b0_sec3_1;
  assign delayMatch_reg_next_4[1] = delayMatch_reg_4[0];

  always @(posedge clk)
    begin : PipelineRegister_5_process
      if (reset == 1'b1) begin
        b1_sec3_2 <= 42'sh00000000000;
      end
      else begin
        if (enb) begin
          b1_sec3_2 <= b1_sec3_1;
        end
      end
    end

  assign b1_sec3_3 = ((b1_sec3_2[41] == 1'b0) && (b1_sec3_2[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((b1_sec3_2[41] == 1'b1) && (b1_sec3_2[40] != 1'b1) ? 34'sh200000000 :
              $signed(b1_sec3_2[40:7])));

  assign cast_b1_sec3_1 = {{6{b1_sec3_3[33]}}, b1_sec3_3};
  assign sum_b1_sec3_add_cast = {cast_b0_sec3_2[39], cast_b0_sec3_2};
  assign sum_b1_sec3_add_cast_1 = {cast_b1_sec3_1[39], cast_b1_sec3_1};
  assign sum_b1_sec3_add_temp = sum_b1_sec3_add_cast + sum_b1_sec3_add_cast_1;
  assign sum_b1_sec3_1 = ((sum_b1_sec3_add_temp[40] == 1'b0) && (sum_b1_sec3_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_b1_sec3_add_temp[40] == 1'b1) && (sum_b1_sec3_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_b1_sec3_add_temp[39:0])));
  assign b2_sec3_1 = {input_delay2_sec3_1[23], {input_delay2_sec3_1, 9'b000000000}};
  assign cast_b2_sec3_1 = {{6{b2_sec3_1[33]}}, b2_sec3_1};
  always @(posedge clk)
    begin : delayMatch_5_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1_4 = 32'sd0; delayMatch_t_1_4 <= 32'sd1; delayMatch_t_1_4 = delayMatch_t_1_4 + 32'sd1) begin
          delayMatch_reg_5[delayMatch_t_1_4] <= 40'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(delayMatch_t_0_0_4 = 32'sd0; delayMatch_t_0_0_4 <= 32'sd1; delayMatch_t_0_0_4 = delayMatch_t_0_0_4 + 32'sd1) begin
            delayMatch_reg_5[delayMatch_t_0_0_4] <= delayMatch_reg_next_5[delayMatch_t_0_0_4];
          end
        end
      end
    end

  assign cast_b2_sec3_2 = delayMatch_reg_5[1];
  assign delayMatch_reg_next_5[0] = cast_b2_sec3_1;
  assign delayMatch_reg_next_5[1] = delayMatch_reg_5[0];

  assign sum_b2_sec3_add_cast = {sum_b1_sec3_1[39], sum_b1_sec3_1};
  assign sum_b2_sec3_add_cast_1 = {cast_b2_sec3_2[39], cast_b2_sec3_2};
  assign sum_b2_sec3_add_temp = sum_b2_sec3_add_cast + sum_b2_sec3_add_cast_1;
  assign sum_b2_sec3_1 = ((sum_b2_sec3_add_temp[40] == 1'b0) && (sum_b2_sec3_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_b2_sec3_add_temp[40] == 1'b1) && (sum_b2_sec3_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_b2_sec3_add_temp[39:0])));
  always @(posedge clk)
    begin : HwModeRegister_12_process
      if (reset == 1'b1) begin
        sec3_to_sec4 <= 40'sh0000000000;
      end
      else begin
        if (enb) begin
          sec3_to_sec4 <= sum_b2_sec3_1;
        end
      end
    end

  assign kconst_12 = 18'sb001101111100111000;

  always @(posedge clk)
    begin : HwModeRegister_13_process
      if (reset == 1'b1) begin
        kconst_13 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_13 <= kconst_12;
        end
      end
    end

  assign scale_sec4_1 = sec3_to_sec4 * kconst_13;
  always @(posedge clk)
    begin : PipelineRegister_6_process
      if (reset == 1'b1) begin
        scale_sec4_2 <= 58'sh000000000000000;
      end
      else begin
        if (enb) begin
          scale_sec4_2 <= scale_sec4_1;
        end
      end
    end

  assign scale_sec4_3 = ((scale_sec4_2[57] == 1'b0) && (scale_sec4_2[56] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((scale_sec4_2[57] == 1'b1) && (scale_sec4_2[56] != 1'b1) ? 40'sh8000000000 :
              $signed(scale_sec4_2[56:17])));

  always @(posedge clk)
    begin : reduced_3_process
      if (reset == 1'b1) begin
        reduced_reg_3 <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          reduced_reg_3[0] <= Enable_out2_3;
          reduced_reg_3[32'sd3:32'sd1] <= reduced_reg_3[32'sd2:32'sd0];
        end
      end
    end

  assign Enable_out2_4 = reduced_reg_3[3];

  assign enb_gated_6 = Enable_out2_4 && enb;

  assign enb_gated_7 = Enable_out2_4 && enb;

  assign a1_sec4_mul_temp = 18'sb111000111010100100 * input_delay1_sec4;
  assign a1_sec4_1 = ((a1_sec4_mul_temp[41] == 1'b0) && (a1_sec4_mul_temp[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((a1_sec4_mul_temp[41] == 1'b1) && (a1_sec4_mul_temp[40] != 1'b1) ? 34'sh200000000 :
              $signed(a1_sec4_mul_temp[40:7])));
  assign cast_a1_sec4_1 = {{6{a1_sec4_1[33]}}, a1_sec4_1};
  always @(posedge clk)
    begin : input_delay1_sec4_1_process
      if (reset == 1'b1) begin
        input_delay1_sec4 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb_gated_6) begin
          input_delay1_sec4 <= pivot_sec4;
        end
      end
    end
  always @(posedge clk)
    begin : input_delay2_sec4_process
      if (reset == 1'b1) begin
        input_delay2_sec4_1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb_gated_7) begin
          input_delay2_sec4_1 <= input_delay1_sec4;
        end
      end
    end
  assign a2_sec4_mul_temp = 18'sb000010011101110100 * input_delay2_sec4_1;
  assign a2_sec4_1 = ((a2_sec4_mul_temp[41] == 1'b0) && (a2_sec4_mul_temp[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((a2_sec4_mul_temp[41] == 1'b1) && (a2_sec4_mul_temp[40] != 1'b1) ? 34'sh200000000 :
              $signed(a2_sec4_mul_temp[40:7])));
  assign cast_a2_sec4_1 = {{6{a2_sec4_1[33]}}, a2_sec4_1};
  assign sum_a2_sec4_sub_cast = {scale_sec4_3[39], scale_sec4_3};
  assign sum_a2_sec4_sub_cast_1 = {cast_a2_sec4_1[39], cast_a2_sec4_1};
  assign sum_a2_sec4_sub_temp = sum_a2_sec4_sub_cast - sum_a2_sec4_sub_cast_1;
  assign sum_a2_sec4_1 = ((sum_a2_sec4_sub_temp[40] == 1'b0) && (sum_a2_sec4_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_a2_sec4_sub_temp[40] == 1'b1) && (sum_a2_sec4_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_a2_sec4_sub_temp[39:0])));
  assign sum_a1_sec4_sub_cast = {sum_a2_sec4_1[39], sum_a2_sec4_1};
  assign sum_a1_sec4_sub_cast_1 = {cast_a1_sec4_1[39], cast_a1_sec4_1};
  assign sum_a1_sec4_sub_temp = sum_a1_sec4_sub_cast - sum_a1_sec4_sub_cast_1;
  assign sum_a1_sec4_1 = ((sum_a1_sec4_sub_temp[40] == 1'b0) && (sum_a1_sec4_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_a1_sec4_sub_temp[40] == 1'b1) && (sum_a1_sec4_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_a1_sec4_sub_temp[39:0])));
  assign pivot_sec4 = ((sum_a1_sec4_1[39] == 1'b0) && (sum_a1_sec4_1[38:32] != 7'b0000000) ? 24'sb011111111111111111111111 :
              ((sum_a1_sec4_1[39] == 1'b1) && (sum_a1_sec4_1[38:32] != 7'b1111111) ? 24'sb100000000000000000000000 :
              $signed(sum_a1_sec4_1[32:9])));
  assign b0_sec4_1 = {pivot_sec4[23], {pivot_sec4, 9'b000000000}};
  assign cast_b0_sec4_1 = {{6{b0_sec4_1[33]}}, b0_sec4_1};
  always @(posedge clk)
    begin : HwModeRegister_14_process
      if (reset == 1'b1) begin
        input_delay1_sec4_2 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          input_delay1_sec4_2 <= input_delay1_sec4;
        end
      end
    end

  assign kconst_14 = 18'sb100101011001001000;

  always @(posedge clk)
    begin : HwModeRegister_15_process
      if (reset == 1'b1) begin
        kconst_15 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_15 <= kconst_14;
        end
      end
    end

  assign b1_sec4_1 = input_delay1_sec4_2 * kconst_15;
  always @(posedge clk)
    begin : delayMatch_6_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1_5 = 32'sd0; delayMatch_t_1_5 <= 32'sd1; delayMatch_t_1_5 = delayMatch_t_1_5 + 32'sd1) begin
          delayMatch_reg_6[delayMatch_t_1_5] <= 40'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(delayMatch_t_0_0_5 = 32'sd0; delayMatch_t_0_0_5 <= 32'sd1; delayMatch_t_0_0_5 = delayMatch_t_0_0_5 + 32'sd1) begin
            delayMatch_reg_6[delayMatch_t_0_0_5] <= delayMatch_reg_next_6[delayMatch_t_0_0_5];
          end
        end
      end
    end

  assign cast_b0_sec4_2 = delayMatch_reg_6[1];
  assign delayMatch_reg_next_6[0] = cast_b0_sec4_1;
  assign delayMatch_reg_next_6[1] = delayMatch_reg_6[0];

  always @(posedge clk)
    begin : PipelineRegister_7_process
      if (reset == 1'b1) begin
        b1_sec4_2 <= 42'sh00000000000;
      end
      else begin
        if (enb) begin
          b1_sec4_2 <= b1_sec4_1;
        end
      end
    end

  assign b1_sec4_3 = ((b1_sec4_2[41] == 1'b0) && (b1_sec4_2[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((b1_sec4_2[41] == 1'b1) && (b1_sec4_2[40] != 1'b1) ? 34'sh200000000 :
              $signed(b1_sec4_2[40:7])));

  assign cast_b1_sec4_1 = {{6{b1_sec4_3[33]}}, b1_sec4_3};
  assign sum_b1_sec4_add_cast = {cast_b0_sec4_2[39], cast_b0_sec4_2};
  assign sum_b1_sec4_add_cast_1 = {cast_b1_sec4_1[39], cast_b1_sec4_1};
  assign sum_b1_sec4_add_temp = sum_b1_sec4_add_cast + sum_b1_sec4_add_cast_1;
  assign sum_b1_sec4_1 = ((sum_b1_sec4_add_temp[40] == 1'b0) && (sum_b1_sec4_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_b1_sec4_add_temp[40] == 1'b1) && (sum_b1_sec4_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_b1_sec4_add_temp[39:0])));
  assign b2_sec4_1 = {input_delay2_sec4_1[23], {input_delay2_sec4_1, 9'b000000000}};
  assign cast_b2_sec4_1 = {{6{b2_sec4_1[33]}}, b2_sec4_1};
  always @(posedge clk)
    begin : delayMatch_7_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1_6 = 32'sd0; delayMatch_t_1_6 <= 32'sd1; delayMatch_t_1_6 = delayMatch_t_1_6 + 32'sd1) begin
          delayMatch_reg_7[delayMatch_t_1_6] <= 40'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(delayMatch_t_0_0_6 = 32'sd0; delayMatch_t_0_0_6 <= 32'sd1; delayMatch_t_0_0_6 = delayMatch_t_0_0_6 + 32'sd1) begin
            delayMatch_reg_7[delayMatch_t_0_0_6] <= delayMatch_reg_next_7[delayMatch_t_0_0_6];
          end
        end
      end
    end

  assign cast_b2_sec4_2 = delayMatch_reg_7[1];
  assign delayMatch_reg_next_7[0] = cast_b2_sec4_1;
  assign delayMatch_reg_next_7[1] = delayMatch_reg_7[0];

  assign sum_b2_sec4_add_cast = {sum_b1_sec4_1[39], sum_b1_sec4_1};
  assign sum_b2_sec4_add_cast_1 = {cast_b2_sec4_2[39], cast_b2_sec4_2};
  assign sum_b2_sec4_add_temp = sum_b2_sec4_add_cast + sum_b2_sec4_add_cast_1;
  assign sum_b2_sec4_1 = ((sum_b2_sec4_add_temp[40] == 1'b0) && (sum_b2_sec4_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_b2_sec4_add_temp[40] == 1'b1) && (sum_b2_sec4_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_b2_sec4_add_temp[39:0])));
  always @(posedge clk)
    begin : HwModeRegister_16_process
      if (reset == 1'b1) begin
        sec4_to_sec5 <= 40'sh0000000000;
      end
      else begin
        if (enb) begin
          sec4_to_sec5 <= sum_b2_sec4_1;
        end
      end
    end

  assign kconst_16 = 18'sb001100101111100000;

  always @(posedge clk)
    begin : HwModeRegister_17_process
      if (reset == 1'b1) begin
        kconst_17 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_17 <= kconst_16;
        end
      end
    end

  assign scale_sec5_1 = sec4_to_sec5 * kconst_17;
  always @(posedge clk)
    begin : PipelineRegister_8_process
      if (reset == 1'b1) begin
        scale_sec5_2 <= 58'sh000000000000000;
      end
      else begin
        if (enb) begin
          scale_sec5_2 <= scale_sec5_1;
        end
      end
    end

  assign scale_sec5_3 = ((scale_sec5_2[57] == 1'b0) && (scale_sec5_2[56] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((scale_sec5_2[57] == 1'b1) && (scale_sec5_2[56] != 1'b1) ? 40'sh8000000000 :
              $signed(scale_sec5_2[56:17])));

  always @(posedge clk)
    begin : reduced_4_process
      if (reset == 1'b1) begin
        reduced_reg_4 <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          reduced_reg_4[0] <= Enable_out2_4;
          reduced_reg_4[32'sd3:32'sd1] <= reduced_reg_4[32'sd2:32'sd0];
        end
      end
    end

  assign Enable_out2_5 = reduced_reg_4[3];

  assign enb_gated_8 = Enable_out2_5 && enb;

  assign enb_gated_9 = Enable_out2_5 && enb;

  assign a1_sec5_mul_temp = 18'sb110111111111001100 * input_delay1_sec5;
  assign a1_sec5_1 = ((a1_sec5_mul_temp[41] == 1'b0) && (a1_sec5_mul_temp[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((a1_sec5_mul_temp[41] == 1'b1) && (a1_sec5_mul_temp[40] != 1'b1) ? 34'sh200000000 :
              $signed(a1_sec5_mul_temp[40:7])));
  assign cast_a1_sec5_1 = {{6{a1_sec5_1[33]}}, a1_sec5_1};
  always @(posedge clk)
    begin : input_delay1_sec5_1_process
      if (reset == 1'b1) begin
        input_delay1_sec5 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb_gated_8) begin
          input_delay1_sec5 <= pivot_sec5;
        end
      end
    end
  always @(posedge clk)
    begin : input_delay2_sec5_process
      if (reset == 1'b1) begin
        input_delay2_sec5_1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb_gated_9) begin
          input_delay2_sec5_1 <= input_delay1_sec5;
        end
      end
    end
  assign a2_sec5_mul_temp = 18'sb000001001100101000 * input_delay2_sec5_1;
  assign a2_sec5_1 = ((a2_sec5_mul_temp[41] == 1'b0) && (a2_sec5_mul_temp[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((a2_sec5_mul_temp[41] == 1'b1) && (a2_sec5_mul_temp[40] != 1'b1) ? 34'sh200000000 :
              $signed(a2_sec5_mul_temp[40:7])));
  assign cast_a2_sec5_1 = {{6{a2_sec5_1[33]}}, a2_sec5_1};
  assign sum_a2_sec5_sub_cast = {scale_sec5_3[39], scale_sec5_3};
  assign sum_a2_sec5_sub_cast_1 = {cast_a2_sec5_1[39], cast_a2_sec5_1};
  assign sum_a2_sec5_sub_temp = sum_a2_sec5_sub_cast - sum_a2_sec5_sub_cast_1;
  assign sum_a2_sec5_1 = ((sum_a2_sec5_sub_temp[40] == 1'b0) && (sum_a2_sec5_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_a2_sec5_sub_temp[40] == 1'b1) && (sum_a2_sec5_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_a2_sec5_sub_temp[39:0])));
  assign sum_a1_sec5_sub_cast = {sum_a2_sec5_1[39], sum_a2_sec5_1};
  assign sum_a1_sec5_sub_cast_1 = {cast_a1_sec5_1[39], cast_a1_sec5_1};
  assign sum_a1_sec5_sub_temp = sum_a1_sec5_sub_cast - sum_a1_sec5_sub_cast_1;
  assign sum_a1_sec5_1 = ((sum_a1_sec5_sub_temp[40] == 1'b0) && (sum_a1_sec5_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_a1_sec5_sub_temp[40] == 1'b1) && (sum_a1_sec5_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_a1_sec5_sub_temp[39:0])));
  assign pivot_sec5 = ((sum_a1_sec5_1[39] == 1'b0) && (sum_a1_sec5_1[38:32] != 7'b0000000) ? 24'sb011111111111111111111111 :
              ((sum_a1_sec5_1[39] == 1'b1) && (sum_a1_sec5_1[38:32] != 7'b1111111) ? 24'sb100000000000000000000000 :
              $signed(sum_a1_sec5_1[32:9])));
  assign b0_sec5_1 = {pivot_sec5[23], {pivot_sec5, 9'b000000000}};
  assign cast_b0_sec5_1 = {{6{b0_sec5_1[33]}}, b0_sec5_1};
  always @(posedge clk)
    begin : HwModeRegister_18_process
      if (reset == 1'b1) begin
        input_delay1_sec5_2 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          input_delay1_sec5_2 <= input_delay1_sec5;
        end
      end
    end

  assign kconst_18 = 18'sb100000101100010000;

  always @(posedge clk)
    begin : HwModeRegister_19_process
      if (reset == 1'b1) begin
        kconst_19 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_19 <= kconst_18;
        end
      end
    end

  assign b1_sec5_1 = input_delay1_sec5_2 * kconst_19;
  always @(posedge clk)
    begin : delayMatch_8_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1_7 = 32'sd0; delayMatch_t_1_7 <= 32'sd1; delayMatch_t_1_7 = delayMatch_t_1_7 + 32'sd1) begin
          delayMatch_reg_8[delayMatch_t_1_7] <= 40'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(delayMatch_t_0_0_7 = 32'sd0; delayMatch_t_0_0_7 <= 32'sd1; delayMatch_t_0_0_7 = delayMatch_t_0_0_7 + 32'sd1) begin
            delayMatch_reg_8[delayMatch_t_0_0_7] <= delayMatch_reg_next_8[delayMatch_t_0_0_7];
          end
        end
      end
    end

  assign cast_b0_sec5_2 = delayMatch_reg_8[1];
  assign delayMatch_reg_next_8[0] = cast_b0_sec5_1;
  assign delayMatch_reg_next_8[1] = delayMatch_reg_8[0];

  always @(posedge clk)
    begin : PipelineRegister_9_process
      if (reset == 1'b1) begin
        b1_sec5_2 <= 42'sh00000000000;
      end
      else begin
        if (enb) begin
          b1_sec5_2 <= b1_sec5_1;
        end
      end
    end

  assign b1_sec5_3 = ((b1_sec5_2[41] == 1'b0) && (b1_sec5_2[40] != 1'b0) ? 34'sh1FFFFFFFF :
              ((b1_sec5_2[41] == 1'b1) && (b1_sec5_2[40] != 1'b1) ? 34'sh200000000 :
              $signed(b1_sec5_2[40:7])));

  assign cast_b1_sec5_1 = {{6{b1_sec5_3[33]}}, b1_sec5_3};
  assign sum_b1_sec5_add_cast = {cast_b0_sec5_2[39], cast_b0_sec5_2};
  assign sum_b1_sec5_add_cast_1 = {cast_b1_sec5_1[39], cast_b1_sec5_1};
  assign sum_b1_sec5_add_temp = sum_b1_sec5_add_cast + sum_b1_sec5_add_cast_1;
  assign sum_b1_sec5_1 = ((sum_b1_sec5_add_temp[40] == 1'b0) && (sum_b1_sec5_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_b1_sec5_add_temp[40] == 1'b1) && (sum_b1_sec5_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_b1_sec5_add_temp[39:0])));
  assign b2_sec5_1 = {input_delay2_sec5_1[23], {input_delay2_sec5_1, 9'b000000000}};
  assign cast_b2_sec5_1 = {{6{b2_sec5_1[33]}}, b2_sec5_1};
  always @(posedge clk)
    begin : delayMatch_9_process
      if (reset == 1'b1) begin
        for(delayMatch_t_1_8 = 32'sd0; delayMatch_t_1_8 <= 32'sd1; delayMatch_t_1_8 = delayMatch_t_1_8 + 32'sd1) begin
          delayMatch_reg_9[delayMatch_t_1_8] <= 40'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(delayMatch_t_0_0_8 = 32'sd0; delayMatch_t_0_0_8 <= 32'sd1; delayMatch_t_0_0_8 = delayMatch_t_0_0_8 + 32'sd1) begin
            delayMatch_reg_9[delayMatch_t_0_0_8] <= delayMatch_reg_next_9[delayMatch_t_0_0_8];
          end
        end
      end
    end

  assign cast_b2_sec5_2 = delayMatch_reg_9[1];
  assign delayMatch_reg_next_9[0] = cast_b2_sec5_1;
  assign delayMatch_reg_next_9[1] = delayMatch_reg_9[0];

  assign sum_b2_sec5_add_cast = {sum_b1_sec5_1[39], sum_b1_sec5_1};
  assign sum_b2_sec5_add_cast_1 = {cast_b2_sec5_2[39], cast_b2_sec5_2};
  assign sum_b2_sec5_add_temp = sum_b2_sec5_add_cast + sum_b2_sec5_add_cast_1;
  assign sum_b2_sec5_1 = ((sum_b2_sec5_add_temp[40] == 1'b0) && (sum_b2_sec5_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((sum_b2_sec5_add_temp[40] == 1'b1) && (sum_b2_sec5_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(sum_b2_sec5_add_temp[39:0])));
  assign Biquad_Filter_HPF_out = ((sum_b2_sec5_1[39] == 1'b0) && (sum_b2_sec5_1[38:32] != 7'b0000000) ? 24'sb011111111111111111111111 :
              ((sum_b2_sec5_1[39] == 1'b1) && (sum_b2_sec5_1[38:32] != 7'b1111111) ? 24'sb100000000000000000000000 :
              $signed(sum_b2_sec5_1[32:9])));
endmodule  // Audio_Filter_IP_src_Biquad_Filter_HPF

