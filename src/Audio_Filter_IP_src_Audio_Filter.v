// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\hdlcoder_audio_filter_biquad\Audio_Filter_IP_src_Audio_Filter.v
// Created: 2024-11-07 11:40:50
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2.26757e-05
// Target subsystem base rate: 2.26757e-05
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        2.26757e-05
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Data_out                      ce_out        2.26757e-05
// Valid_out                     ce_out        2.26757e-05
// Pass_through_LED              ce_out        2.26757e-05
// BiQuad_LPF_LED                ce_out        2.26757e-05
// Biquad_BPF_LED                ce_out        2.26757e-05
// BiQuad_HPF_LED                ce_out        2.26757e-05
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Audio_Filter_IP_src_Audio_Filter
// Source Path: hdlcoder_audio_filter_biquad/Audio_Filter
// Hierarchy Level: 0
// Model version: 10.1
// 
// Simulink model description for hdlcoder_audio_filter_biquad:
// 
// Model Contains Audio Equalizer 
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Audio_Filter_IP_src_Audio_Filter
          (clk,
           reset,
           clk_enable,
           Data_in,
           Valid_in,
           Filter_select,
           ce_out,
           Data_out,
           Valid_out,
           Pass_through_LED,
           BiQuad_LPF_LED,
           Biquad_BPF_LED,
           BiQuad_HPF_LED);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [47:0] Data_in;  // ufix48
  input   Valid_in;
  input   [7:0] Filter_select;  // uint8
  output  ce_out;
  output  [47:0] Data_out;  // ufix48
  output  Valid_out;
  output  Pass_through_LED;
  output  BiQuad_LPF_LED;
  output  Biquad_BPF_LED;
  output  BiQuad_HPF_LED;


  wire enb;
  wire Control_Logic_To_Enable_Filters_out1;
  wire Control_Logic_To_Enable_Filters_out2;
  wire BiQuad_BPF;
  wire Control_Logic_To_Enable_Filters_out4;
  wire [47:0] Filter_block_out1;  // ufix48
  reg  [27:0] delayMatch_reg;  // ufix1 [28]
  wire Valid_in_1;
  reg  [27:0] delayMatch_reg_1;  // ufix1 [28]
  wire Control_Logic_To_Enable_Filters_out1_1;
  reg  [27:0] delayMatch_reg_2;  // ufix1 [28]
  wire Control_Logic_To_Enable_Filters_out2_1;
  reg  [27:0] delayMatch_reg_3;  // ufix1 [28]
  wire BiQuad_BPF_1;
  reg  [27:0] delayMatch_reg_4;  // ufix1 [28]
  wire Control_Logic_To_Enable_Filters_out4_1;


  Audio_Filter_IP_src_Control_Logic_To_Enable_Filters u_Control_Logic_To_Enable_Filters (.In1(Filter_select),  // uint8
                                                                                         .Pass_Through(Control_Logic_To_Enable_Filters_out1),
                                                                                         .BiQuad_LPF(Control_Logic_To_Enable_Filters_out2),
                                                                                         .BiQuad_BPF(BiQuad_BPF),
                                                                                         .BiQuad_HPF(Control_Logic_To_Enable_Filters_out4)
                                                                                         );
  Audio_Filter_IP_src_Filter_block u_Filter_block (.clk(clk),
                                                   .reset(reset),
                                                   .enb(clk_enable),
                                                   .Data_in(Data_in),  // ufix48
                                                   .Input_to_Switch(Filter_select),  // uint8
                                                   .BiQuad_LPF(Control_Logic_To_Enable_Filters_out2),
                                                   .BiQuad_BPF(BiQuad_BPF),
                                                   .BiQuad_HPF(Control_Logic_To_Enable_Filters_out4),
                                                   .Enable(Valid_in),
                                                   .Data_out(Filter_block_out1)  // ufix48
                                                   );
  assign Data_out = Filter_block_out1;

  assign enb = clk_enable;

  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg <= {28{1'b0}};
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= Valid_in;
          delayMatch_reg[32'sd27:32'sd1] <= delayMatch_reg[32'sd26:32'sd0];
        end
      end
    end

  assign Valid_in_1 = delayMatch_reg[27];

  assign Valid_out = Valid_in_1;

  always @(posedge clk)
    begin : delayMatch_1_process
      if (reset == 1'b1) begin
        delayMatch_reg_1 <= {28{1'b0}};
      end
      else begin
        if (enb) begin
          delayMatch_reg_1[0] <= Control_Logic_To_Enable_Filters_out1;
          delayMatch_reg_1[32'sd27:32'sd1] <= delayMatch_reg_1[32'sd26:32'sd0];
        end
      end
    end

  assign Control_Logic_To_Enable_Filters_out1_1 = delayMatch_reg_1[27];

  assign Pass_through_LED = Control_Logic_To_Enable_Filters_out1_1;

  always @(posedge clk)
    begin : delayMatch_2_process
      if (reset == 1'b1) begin
        delayMatch_reg_2 <= {28{1'b0}};
      end
      else begin
        if (enb) begin
          delayMatch_reg_2[0] <= Control_Logic_To_Enable_Filters_out2;
          delayMatch_reg_2[32'sd27:32'sd1] <= delayMatch_reg_2[32'sd26:32'sd0];
        end
      end
    end

  assign Control_Logic_To_Enable_Filters_out2_1 = delayMatch_reg_2[27];

  assign BiQuad_LPF_LED = Control_Logic_To_Enable_Filters_out2_1;

  always @(posedge clk)
    begin : delayMatch_3_process
      if (reset == 1'b1) begin
        delayMatch_reg_3 <= {28{1'b0}};
      end
      else begin
        if (enb) begin
          delayMatch_reg_3[0] <= BiQuad_BPF;
          delayMatch_reg_3[32'sd27:32'sd1] <= delayMatch_reg_3[32'sd26:32'sd0];
        end
      end
    end

  assign BiQuad_BPF_1 = delayMatch_reg_3[27];

  assign Biquad_BPF_LED = BiQuad_BPF_1;

  always @(posedge clk)
    begin : delayMatch_4_process
      if (reset == 1'b1) begin
        delayMatch_reg_4 <= {28{1'b0}};
      end
      else begin
        if (enb) begin
          delayMatch_reg_4[0] <= Control_Logic_To_Enable_Filters_out4;
          delayMatch_reg_4[32'sd27:32'sd1] <= delayMatch_reg_4[32'sd26:32'sd0];
        end
      end
    end

  assign Control_Logic_To_Enable_Filters_out4_1 = delayMatch_reg_4[27];

  assign BiQuad_HPF_LED = Control_Logic_To_Enable_Filters_out4_1;

  assign ce_out = clk_enable;

endmodule  // Audio_Filter_IP_src_Audio_Filter

