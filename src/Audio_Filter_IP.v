// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\hdlcoder_audio_filter_biquad\Audio_Filter_IP.v
// Created: 2024-11-07 11:08:52
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: -1
// Target subsystem base rate: -1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Audio_Filter_IP
// Source Path: Audio_Filter_IP
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Audio_Filter_IP
          (IPCORE_CLK,
           IPCORE_RESETN,
           AXI4_Stream_Master_TREADY,
           AXI4_Stream_Slave_TDATA,
           AXI4_Stream_Slave_TVALID,
           AXI4_Lite_ACLK,
           AXI4_Lite_ARESETN,
           AXI4_Lite_AWADDR,
           AXI4_Lite_AWVALID,
           AXI4_Lite_WDATA,
           AXI4_Lite_WSTRB,
           AXI4_Lite_WVALID,
           AXI4_Lite_BREADY,
           AXI4_Lite_ARADDR,
           AXI4_Lite_ARVALID,
           AXI4_Lite_RREADY,
           AXI4_Stream_Master_TDATA,
           AXI4_Stream_Master_TVALID,
           AXI4_Stream_Master_TLAST,
           AXI4_Stream_Slave_TREADY,
           GPLEDs,
           AXI4_Lite_AWREADY,
           AXI4_Lite_WREADY,
           AXI4_Lite_BRESP,
           AXI4_Lite_BVALID,
           AXI4_Lite_ARREADY,
           AXI4_Lite_RDATA,
           AXI4_Lite_RRESP,
           AXI4_Lite_RVALID);


  input   IPCORE_CLK;  // ufix1
  input   IPCORE_RESETN;  // ufix1
  input   AXI4_Stream_Master_TREADY;  // ufix1
  input   [47:0] AXI4_Stream_Slave_TDATA;  // ufix48
  input   AXI4_Stream_Slave_TVALID;  // ufix1
  input   AXI4_Lite_ACLK;  // ufix1
  input   AXI4_Lite_ARESETN;  // ufix1
  input   [15:0] AXI4_Lite_AWADDR;  // ufix16
  input   AXI4_Lite_AWVALID;  // ufix1
  input   [31:0] AXI4_Lite_WDATA;  // ufix32
  input   [3:0] AXI4_Lite_WSTRB;  // ufix4
  input   AXI4_Lite_WVALID;  // ufix1
  input   AXI4_Lite_BREADY;  // ufix1
  input   [15:0] AXI4_Lite_ARADDR;  // ufix16
  input   AXI4_Lite_ARVALID;  // ufix1
  input   AXI4_Lite_RREADY;  // ufix1
  output  [47:0] AXI4_Stream_Master_TDATA;  // ufix48
  output  AXI4_Stream_Master_TVALID;  // ufix1
  output  AXI4_Stream_Master_TLAST;  // ufix1
  output  AXI4_Stream_Slave_TREADY;  // ufix1
  output  [7:0] GPLEDs;  // ufix8
  output  AXI4_Lite_AWREADY;  // ufix1
  output  AXI4_Lite_WREADY;  // ufix1
  output  [1:0] AXI4_Lite_BRESP;  // ufix2
  output  AXI4_Lite_BVALID;  // ufix1
  output  AXI4_Lite_ARREADY;  // ufix1
  output  [31:0] AXI4_Lite_RDATA;  // ufix32
  output  [1:0] AXI4_Lite_RRESP;  // ufix2
  output  AXI4_Lite_RVALID;  // ufix1


  wire reset;
  wire enb;
  wire [31:0] ip_timestamp;  // ufix32
  wire reset_cm;  // ufix1
  wire reset_internal;  // ufix1
  wire reset_before_sync;  // ufix1
  wire write_axi_enable;  // ufix1
  wire [31:0] write_packet_size_axi4_stream_master;  // ufix32
  wire [7:0] write_Filter_select;  // ufix8
  wire const_1;  // ufix1
  wire auto_ready_axi4_stream_master;  // ufix1
  wire [47:0] top_user_data;  // ufix48
  wire top_user_valid;  // ufix1
  reg  auto_ready_dut_enb;  // ufix1
  wire dut_enable;  // ufix1
  wire ce_out_sig;  // ufix1
  wire [47:0] Data_out_sig;  // ufix48
  wire Valid_out_sig;  // ufix1
  wire Pass_through_LED_sig;  // ufix1
  wire BiQuad_LPF_LED_sig;  // ufix1
  wire Biquad_BPF_LED_sig;  // ufix1
  wire BiQuad_HPF_LED_sig;  // ufix1
  wire [3:0] const_zero;  // ufix4


  assign ip_timestamp = 32'b10001111101101100000011010000100;

  assign reset_cm =  ~ IPCORE_RESETN;

  assign reset_before_sync = reset_cm | reset_internal;

  Audio_Filter_IP_reset_sync u_Audio_Filter_IP_reset_sync_inst (.clk(IPCORE_CLK),  // ufix1
                                                                .reset_in(reset_before_sync),  // ufix1
                                                                .reset_out(reset)
                                                                );

  Audio_Filter_IP_axi_lite u_Audio_Filter_IP_axi_lite_inst (.reset(reset),
                                                            .AXI4_Lite_ACLK(AXI4_Lite_ACLK),  // ufix1
                                                            .AXI4_Lite_ARESETN(AXI4_Lite_ARESETN),  // ufix1
                                                            .AXI4_Lite_AWADDR(AXI4_Lite_AWADDR),  // ufix16
                                                            .AXI4_Lite_AWVALID(AXI4_Lite_AWVALID),  // ufix1
                                                            .AXI4_Lite_WDATA(AXI4_Lite_WDATA),  // ufix32
                                                            .AXI4_Lite_WSTRB(AXI4_Lite_WSTRB),  // ufix4
                                                            .AXI4_Lite_WVALID(AXI4_Lite_WVALID),  // ufix1
                                                            .AXI4_Lite_BREADY(AXI4_Lite_BREADY),  // ufix1
                                                            .AXI4_Lite_ARADDR(AXI4_Lite_ARADDR),  // ufix16
                                                            .AXI4_Lite_ARVALID(AXI4_Lite_ARVALID),  // ufix1
                                                            .AXI4_Lite_RREADY(AXI4_Lite_RREADY),  // ufix1
                                                            .read_ip_timestamp(ip_timestamp),  // ufix32
                                                            .AXI4_Lite_AWREADY(AXI4_Lite_AWREADY),  // ufix1
                                                            .AXI4_Lite_WREADY(AXI4_Lite_WREADY),  // ufix1
                                                            .AXI4_Lite_BRESP(AXI4_Lite_BRESP),  // ufix2
                                                            .AXI4_Lite_BVALID(AXI4_Lite_BVALID),  // ufix1
                                                            .AXI4_Lite_ARREADY(AXI4_Lite_ARREADY),  // ufix1
                                                            .AXI4_Lite_RDATA(AXI4_Lite_RDATA),  // ufix32
                                                            .AXI4_Lite_RRESP(AXI4_Lite_RRESP),  // ufix2
                                                            .AXI4_Lite_RVALID(AXI4_Lite_RVALID),  // ufix1
                                                            .write_axi_enable(write_axi_enable),  // ufix1
                                                            .write_packet_size_axi4_stream_master(write_packet_size_axi4_stream_master),  // ufix32
                                                            .write_Filter_select(write_Filter_select),  // ufix8
                                                            .reset_internal(reset_internal)  // ufix1
                                                            );

  assign const_1 = 1'b1;

  assign enb = const_1;

  Audio_Filter_IP_axi4_stream_slave u_Audio_Filter_IP_axi4_stream_slave_inst (.clk(IPCORE_CLK),  // ufix1
                                                                              .reset(reset),
                                                                              .enb(const_1),
                                                                              .AXI4_Stream_Slave_TDATA(AXI4_Stream_Slave_TDATA),  // ufix48
                                                                              .AXI4_Stream_Slave_TVALID(AXI4_Stream_Slave_TVALID),  // ufix1
                                                                              .auto_ready(auto_ready_axi4_stream_master),  // ufix1
                                                                              .AXI4_Stream_Slave_TREADY(AXI4_Stream_Slave_TREADY),  // ufix1
                                                                              .user_data(top_user_data),  // ufix48
                                                                              .user_valid(top_user_valid)  // ufix1
                                                                              );

  always @(posedge IPCORE_CLK)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        auto_ready_dut_enb <= 1'b0;
      end
      else begin
        if (enb) begin
          auto_ready_dut_enb <= auto_ready_axi4_stream_master;
        end
      end
    end

  assign dut_enable = write_axi_enable & auto_ready_dut_enb;

  Audio_Filter_IP_dut u_Audio_Filter_IP_dut_inst (.clk(IPCORE_CLK),  // ufix1
                                                  .reset(reset),
                                                  .dut_enable(dut_enable),  // ufix1
                                                  .Data_in(top_user_data),  // ufix48
                                                  .Valid_in(top_user_valid),  // ufix1
                                                  .Filter_select(write_Filter_select),  // ufix8
                                                  .ce_out(ce_out_sig),  // ufix1
                                                  .Data_out(Data_out_sig),  // ufix48
                                                  .Valid_out(Valid_out_sig),  // ufix1
                                                  .Pass_through_LED(Pass_through_LED_sig),  // ufix1
                                                  .BiQuad_LPF_LED(BiQuad_LPF_LED_sig),  // ufix1
                                                  .Biquad_BPF_LED(Biquad_BPF_LED_sig),  // ufix1
                                                  .BiQuad_HPF_LED(BiQuad_HPF_LED_sig)  // ufix1
                                                  );

  Audio_Filter_IP_axi4_stream_master u_Audio_Filter_IP_axi4_stream_master_inst (.clk(IPCORE_CLK),  // ufix1
                                                                                .reset(reset),
                                                                                .enb(const_1),
                                                                                .AXI4_Stream_Master_TREADY(AXI4_Stream_Master_TREADY),  // ufix1
                                                                                .user_data(Data_out_sig),  // ufix48
                                                                                .user_valid(Valid_out_sig),  // ufix1
                                                                                .write_packet_size_axi4_stream_master(write_packet_size_axi4_stream_master),  // ufix32
                                                                                .AXI4_Stream_Master_TDATA(AXI4_Stream_Master_TDATA),  // ufix48
                                                                                .AXI4_Stream_Master_TVALID(AXI4_Stream_Master_TVALID),  // ufix1
                                                                                .AXI4_Stream_Master_TLAST(AXI4_Stream_Master_TLAST),  // ufix1
                                                                                .auto_ready(auto_ready_axi4_stream_master)  // ufix1
                                                                                );

  assign const_zero = 4'b0000;

  assign GPLEDs = {const_zero, {BiQuad_HPF_LED_sig, Biquad_BPF_LED_sig, BiQuad_LPF_LED_sig, Pass_through_LED_sig}};

endmodule  // Audio_Filter_IP

