// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\hdlcoder_audio_filter_biquad\Audio_Filter_IP_addr_decoder.v
// Created: 2024-11-07 11:08:52
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Audio_Filter_IP_addr_decoder
// Source Path: Audio_Filter_IP/Audio_Filter_IP_axi_lite/Audio_Filter_IP_addr_decoder
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Audio_Filter_IP_addr_decoder
          (clk,
           reset,
           data_write,
           addr_write,
           wr_enb,
           addr_read,
           rd_enb,
           read_ip_timestamp,
           data_read,
           write_axi_enable,
           write_packet_size_axi4_stream_master,
           write_Filter_select);


  input   clk;
  input   reset;
  input   [31:0] data_write;  // ufix32
  input   [13:0] addr_write;  // ufix14
  input   wr_enb;  // ufix1
  input   [13:0] addr_read;  // ufix14
  input   rd_enb;  // ufix1
  input   [31:0] read_ip_timestamp;  // ufix32
  output  [31:0] data_read;  // ufix32
  output  write_axi_enable;  // ufix1
  output  [31:0] write_packet_size_axi4_stream_master;  // ufix32
  output  [7:0] write_Filter_select;  // ufix8


  wire enb;
  wire [1:0] address_select_level1;  // ufix2
  wire const_1;  // ufix1
  reg [31:0] read_reg_ip_timestamp;  // ufix32
  wire [31:0] const_0;  // ufix32
  wire [31:0] mux_out0_level1;  // ufix32
  wire decode_sel_axi_enable_1_1;  // ufix1
  wire reg_enb_axi_enable_1_1;  // ufix1
  wire data_in_axi_enable;  // ufix1
  reg  data_reg_axi_enable_1_1;  // ufix1
  wire decode_sel_packet_size_axi4_stream_master_1_1;  // ufix1
  wire reg_enb_packet_size_axi4_stream_master_1_1;  // ufix1
  reg [31:0] data_reg_packet_size_axi4_stream_master_1_1;  // ufix32
  wire decode_sel_Filter_select_1_1;  // ufix1
  wire reg_enb_Filter_select_1_1;  // ufix1
  wire [7:0] data_in_Filter_select;  // ufix8
  reg [7:0] data_reg_Filter_select_1_1;  // ufix8


  assign address_select_level1 = addr_read[1:0];

  assign const_1 = 1'b1;

  assign enb = const_1;

  always @(posedge clk)
    begin : reg_ip_timestamp_process
      if (reset == 1'b1) begin
        read_reg_ip_timestamp <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_ip_timestamp <= read_ip_timestamp;
        end
      end
    end

  assign const_0 = 32'b00000000000000000000000000000000;

  assign mux_out0_level1 = (address_select_level1 == 2'b11 ? read_reg_ip_timestamp :
              const_0);

  assign data_read = mux_out0_level1;

  assign decode_sel_axi_enable_1_1 = addr_write == 14'b00000000000001;

  assign reg_enb_axi_enable_1_1 = decode_sel_axi_enable_1_1 & wr_enb;

  assign data_in_axi_enable = data_write[0];

  always @(posedge clk)
    begin : reg_axi_enable_1_1_process
      if (reset == 1'b1) begin
        data_reg_axi_enable_1_1 <= 1'b1;
      end
      else begin
        if (enb && reg_enb_axi_enable_1_1) begin
          data_reg_axi_enable_1_1 <= data_in_axi_enable;
        end
      end
    end

  assign write_axi_enable = data_reg_axi_enable_1_1;

  assign decode_sel_packet_size_axi4_stream_master_1_1 = addr_write == 14'b00000000000010;

  assign reg_enb_packet_size_axi4_stream_master_1_1 = decode_sel_packet_size_axi4_stream_master_1_1 & wr_enb;

  always @(posedge clk)
    begin : reg_packet_size_axi4_stream_master_1_1_process
      if (reset == 1'b1) begin
        data_reg_packet_size_axi4_stream_master_1_1 <= 32'b00000000000000000000010000000000;
      end
      else begin
        if (enb && reg_enb_packet_size_axi4_stream_master_1_1) begin
          data_reg_packet_size_axi4_stream_master_1_1 <= data_write;
        end
      end
    end

  assign write_packet_size_axi4_stream_master = data_reg_packet_size_axi4_stream_master_1_1;

  assign decode_sel_Filter_select_1_1 = addr_write == 14'b00000001000000;

  assign reg_enb_Filter_select_1_1 = decode_sel_Filter_select_1_1 & wr_enb;

  assign data_in_Filter_select = data_write[7:0];

  always @(posedge clk)
    begin : reg_Filter_select_1_1_process
      if (reset == 1'b1) begin
        data_reg_Filter_select_1_1 <= 8'b00000000;
      end
      else begin
        if (enb && reg_enb_Filter_select_1_1) begin
          data_reg_Filter_select_1_1 <= data_in_Filter_select;
        end
      end
    end

  assign write_Filter_select = data_reg_Filter_select_1_1;

endmodule  // Audio_Filter_IP_addr_decoder

