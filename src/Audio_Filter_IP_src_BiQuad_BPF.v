// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\hdlcoder_audio_filter_biquad\Audio_Filter_IP_src_BiQuad_BPF.v
// Created: 2024-11-07 11:40:50
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Audio_Filter_IP_src_BiQuad_BPF
// Source Path: hdlcoder_audio_filter_biquad/Audio_Filter/Filter_block/BiQuad_BPF 
// Hierarchy Level: 2
// Model version: 10.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Audio_Filter_IP_src_BiQuad_BPF
          (clk,
           reset,
           enb,
           In1,
           Enable,
           Out1);


  input   clk;
  input   reset;
  input   enb;
  input   signed [23:0] In1;  // sfix24_En22
  input   Enable;
  output  signed [23:0] Out1;  // sfix24_En22


  reg  [27:0] delayMatch_reg;  // ufix1 [28]
  wire Enable_out2;
  wire signed [23:0] Biquad_Filter_BPF_out1;  // sfix24_En22
  wire signed [23:0] Biquad_Filter_BPF_out1_bypass;  // sfix24_En22
  reg signed [23:0] Biquad_Filter_BPF_out1_last_value;  // sfix24_En22


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg <= {28{1'b0}};
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= Enable;
          delayMatch_reg[32'sd27:32'sd1] <= delayMatch_reg[32'sd26:32'sd0];
        end
      end
    end

  assign Enable_out2 = delayMatch_reg[27];

  Audio_Filter_IP_src_Biquad_Filter_BPF u_Biquad_Filter_BPF (.clk(clk),
                                                             .reset(reset),
                                                             .enb(enb),
                                                             .Biquad_Filter_BPF_In(In1),  // sfix24_En22
                                                             .Enable_out2(Enable),
                                                             .Biquad_Filter_BPF_out(Biquad_Filter_BPF_out1)  // sfix24_En22
                                                             );
  always @(posedge clk)
    begin : Out1_bypass_process
      if (reset == 1'b1) begin
        Biquad_Filter_BPF_out1_last_value <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Biquad_Filter_BPF_out1_last_value <= Biquad_Filter_BPF_out1_bypass;
        end
      end
    end

  assign Biquad_Filter_BPF_out1_bypass = (Enable_out2 == 1'b0 ? Biquad_Filter_BPF_out1_last_value :
              Biquad_Filter_BPF_out1);

  assign Out1 = Biquad_Filter_BPF_out1_bypass;

endmodule  // Audio_Filter_IP_src_BiQuad_BPF

